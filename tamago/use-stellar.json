{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-stellar",
  "type": "registry:hook",
  "files": [
    {
      "path": "registry/rei/tamagoreng/use-stellar.ts",
      "content": "import { useCallback, useMemo } from \"react\";\nimport * as Tamago from \"../../packages/<CONTRACT_ID>\";\nimport { useSubmitTransaction } from \"./use-submit-transaction\";\nimport { useWallet } from \"./use-wallet\";\n\nexport interface WalletState {\n  isConnected: boolean;\n  address: string | null;\n  selectedWallet: unknown;\n}\n\nconst NETWORK_PASSPHRASE = Tamago.networks.testnet.networkPassphrase;\nconst RPC_URL = \"https://soroban-testnet.stellar.org\";\n\nexport const useStellar = () => {\n  const { address, isConnected } = useWallet();\n\n  const { submit } = useSubmitTransaction({\n    networkPassphrase: NETWORK_PASSPHRASE,\n    rpcUrl: RPC_URL,\n    onSuccess: () => {\n      console.log(\"success submit tx\");\n    },\n    onError: (error) => {\n      console.error(\"Transaction error \", error);\n    },\n  });\n\n  const getContractClient = useMemo(() => {\n    if (!isConnected || address === \"-\") return null;\n\n    return new Tamago.Client({\n      ...Tamago.networks.testnet,\n      rpcUrl: \"https://soroban-testnet.stellar.org\",\n      allowHttp: false,\n      publicKey: address || undefined,\n    });\n  }, [address]);\n\n  // Helper for contract calls with transaction submission\n  const execTx = useCallback(\n    async (txPromise: Promise<any>) => {\n      const tx = await txPromise;\n      await submit(tx);\n      return tx.result;\n    },\n    [submit]\n  );\n\n  // Helper for read-only contract calls\n  const readTx = useCallback(\n    async (txPromise: Promise<any>, defaultValue: any, transform?: (result: any) => any) => {\n      try {\n        const tx = await txPromise;\n        return transform ? transform(tx.result) : tx.result;\n      } catch {\n        return defaultValue;\n      }\n    },\n    []\n  );\n\n  // Contract methods\n  const createPet = (name: string) => {\n    const tx = getContractClient!.create({ owner: address, name });\n    return execTx(tx);\n  };\n\n  /* --------------------------------- get_pet -------------------------------- */\n  const getPet = () => {\n    const tx = getContractClient!.get_pet({ owner: address });\n    return readTx(tx, null);\n  };\n\n  /* -------------------------------- get_coins ------------------------------- */\n  const getCoins = () => {\n    return readTx(getContractClient!.get_coins({ owner: address }), 0, Number);\n  };\n\n  /* ---------------------------------- feed ---------------------------------- */\n  const feedPet = () => {\n    return execTx(getContractClient!.feed({ owner: address }));\n  };\n\n  /* ---------------------------------- play ---------------------------------- */\n  const playWithPet = () => {\n    return execTx(getContractClient!.play({ owner: address }));\n  };\n\n  /* ---------------------------------- work ---------------------------------- */\n  const workWithPet = () => {\n    return execTx(getContractClient!.work({ owner: address }));\n  };\n\n  /* ---------------------------------- sleep --------------------------------- */\n  const putPetToSleep = () => {\n    return execTx(getContractClient!.sleep({ owner: address }));\n  };\n\n  /* ------------------------------ mint_glasses ------------------------------ */\n  const mintGlasses = () => {\n    return execTx(getContractClient!.mint_glasses({ owner: address }));\n  };\n\n  return {\n    createPet,\n    getPet,\n    getCoins,\n    feedPet,\n    playWithPet,\n    workWithPet,\n    putPetToSleep,\n    mintGlasses,\n  };\n};\n",
      "type": "registry:hook"
    }
  ]
}