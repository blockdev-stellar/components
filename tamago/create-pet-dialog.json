{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create-pet-dialog",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/rei/tamagoreng/comp/create-pet-dialog.tsx",
      "content": "import React, { useState } from \"react\";\nimport { Button } from \"./ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"./ui/dialog\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { useGame } from \"~/context/game-context\";\nimport { Sparkles, Loader2 } from \"lucide-react\";\nimport { useWallet } from \"~/hooks/use-wallet\";\n\nexport const CreatePetDialog: React.FC = () => {\n  const [open, setOpen] = useState(false);\n  const [petName, setPetName] = useState(\"\");\n  const { createRealPet, isLoading } = useGame();\n  const { isConnected } = useWallet();\n\n  const handleCreate = async () => {\n    if (!petName.trim()) return;\n\n    await createRealPet(petName.trim());\n    setOpen(false);\n    setPetName(\"\");\n  };\n\n  if (!isConnected) {\n    return null;\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"bg-green-600 hover:bg-green-700 text-white font-pixel\" size=\"lg\">\n          <Sparkles className=\"w-4 h-4 mr-2\" />\n          Create Pet on Stellar\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px] bg-card border-4 border-border\">\n        <DialogHeader>\n          <DialogTitle className=\"font-pixel text-xl\">Create Your Stellar Pet</DialogTitle>\n          <DialogDescription>\n            This will create a real pet on the Stellar blockchain that you own!\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"name\" className=\"text-right font-pixel\">\n              Name\n            </Label>\n            <Input\n              id=\"name\"\n              value={petName}\n              onChange={(e) => setPetName(e.target.value)}\n              placeholder=\"Enter pet name...\"\n              className=\"col-span-3 border-2 border-border\"\n              maxLength={20}\n              disabled={isLoading}\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => setOpen(false)}\n            disabled={isLoading}\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            onClick={handleCreate}\n            disabled={!petName.trim() || isLoading}\n            className=\"bg-green-600 hover:bg-green-700\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                Creating...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n                Create Pet\n              </>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}