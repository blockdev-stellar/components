{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "game-context",
  "type": "registry:file",
  "files": [
    {
      "path": "registry/rei/tamagoreng/game-context.tsx",
      "content": "import React, { createContext, useContext, useEffect, useState, useCallback } from \"react\";\nimport { useStellar } from \"~/hooks/use-stellar\";\nimport * as Tamago from \"../../packages/<CONTRACT_ID>\";\nimport { useWallet } from \"~/hooks/use-wallet\";\nimport { toast } from \"sonner\";\nimport type { GameState, PetStats, GameContextType } from \"./game-context.type\";\n\nconst GameContext = createContext<GameContextType | undefined>(undefined);\n\nconst INITIAL_STATE: GameState = {\n  stats: {\n    hunger: 0,\n    happy: 0,\n    energy: 0,\n  },\n  coins: 0,\n  inventory: [],\n  equippedItems: [],\n  isSleeping: false,\n  lastUpdate: Date.now(),\n  petMood: \"neutral\",\n  petName: undefined,\n  hasRealPet: false,\n};\n\nexport const GameProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { isConnected } = useWallet();\n  const {\n    getPet,\n    getCoins,\n    createPet,\n    feedPet: feedPetStellar,\n    mintGlasses,\n    playWithPet: playWithPetStellar,\n    workWithPet: workWithPetStellar,\n    putPetToSleep: putPetToSleepStellar,\n  } = useStellar();\n\n  const [gameState, setGameState] = useState<GameState>(() => {\n    const saved = localStorage.getItem(\"pixelPetGame\");\n    if (saved) {\n      const parsed = JSON.parse(saved);\n      return { ...parsed, lastUpdate: Date.now() };\n    }\n    return INITIAL_STATE;\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Save to localStorage whenever state changes\n  useEffect(() => {\n    localStorage.setItem(\"pixelPetGame\", JSON.stringify(gameState));\n  }, [gameState]);\n\n  // Helper to convert blockchain Pet to our PetStats\n  const convertPetToStats = (pet: Tamago.Pet): { stats: PetStats; petName: string } => {\n    return {\n      stats: {\n        hunger: Number(pet.hunger),\n        happy: Number(pet.happiness),\n        energy: Number(pet.energy),\n      },\n      petName: pet.name,\n    };\n  };\n\n  // Calculate pet mood based on stats\n  const calculateMood = (stats: PetStats, isSleeping: boolean): GameState[\"petMood\"] => {\n    if (isSleeping) return \"sleeping\";\n    const avgStat = (stats.hunger + stats.happy + stats.energy) / 3;\n    if (avgStat > 60) return \"happy\";\n    if (avgStat > 30) return \"neutral\";\n    return \"sad\";\n  };\n\n  // Sync with blockchain data\n  const syncWithBlockchain = useCallback(async () => {\n    if (!isConnected) return;\n\n    console.log(\"masuk kok sync\");\n\n    try {\n      setIsLoading(true);\n      const [pet, coins] = await Promise.all([getPet(), getCoins()]);\n\n      if (pet && pet.is_alive) {\n        const { stats, petName } = convertPetToStats(pet);\n        setGameState((prev) => ({\n          ...prev,\n          stats,\n          coins,\n          petName,\n          hasRealPet: true,\n          petMood: calculateMood(stats, false),\n          equippedItems: pet.has_glasses\n            ? [...prev.equippedItems.filter((item) => item !== \"cool-glasses\"), \"cool-glasses\"]\n            : prev.equippedItems.filter((item) => item !== \"cool-glasses\"),\n          inventory: pet.has_glasses\n            ? [...prev.inventory.filter((item) => item !== \"cool-glasses\"), \"cool-glasses\"]\n            : prev.inventory.filter((item) => item !== \"cool-glasses\"),\n        }));\n      } else {\n        // Pet doesn't exist or is dead\n        setGameState((prev) => ({ ...prev, hasRealPet: false, coins }));\n      }\n    } catch (error) {\n      console.error(\"Failed to sync with blockchain:\", error);\n      toast.error(\"Failed to sync with blockchain\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isConnected]);\n\n  // Create real pet on blockchain\n  const createRealPet = async (name: string) => {\n    if (!isConnected) {\n      toast.error(\"Please connect your wallet first\");\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      toast.loading(\"Creating pet on Stellar...\", { id: \"create\" });\n\n      const pet = await createPet(name);\n      const { stats, petName } = convertPetToStats(pet);\n\n      setGameState((prev) => ({\n        ...prev,\n        stats,\n        petName,\n        hasRealPet: true,\n        petMood: calculateMood(stats, false),\n        lastUpdate: Date.now(),\n      }));\n\n      toast.dismiss(\"create\");\n      toast.success(`🎉 ${name} created on Stellar!`);\n    } catch (error) {\n      console.error(\"Failed to create pet:\", error);\n      toast.error(\"Failed to create pet on blockchain\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper for blockchain actions\n  const executeStellarAction = async (\n    action: () => Promise<any>,\n    loadingMsg: string,\n    successMsg: string,\n    toastId: string\n  ) => {\n    if (!isConnected) {\n      toast.error(\"Please connect your wallet first\");\n      return;\n    }\n\n    if (!gameState.hasRealPet) {\n      toast.error(\"Please create a pet on Stellar first\");\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      toast.loading(loadingMsg, { id: toastId });\n      await action();\n      await syncWithBlockchain();\n      toast.dismiss(toastId);\n      toast.success(successMsg);\n    } catch (error) {\n      console.error(`Blockchain ${toastId} failed:`, error);\n      toast.error(`Failed to ${toastId} on blockchain`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // prettier-ignore\n  const feedPet = () => executeStellarAction(feedPetStellar, \"Feeding pet on Stellar...\", \"🍖 Yum! Pet fed on-chain!\", \"feed\");\n\n  // prettier-ignore\n  const playWithPet = () => executeStellarAction(playWithPetStellar, \"Playing with pet on Stellar...\", \"🎮 Wheee! So fun on-chain!\", \"play\");\n\n  // prettier-ignore\n  const workWithPet = () => executeStellarAction(workWithPetStellar, \"Working with pet on Stellar...\", \"💰 Work completed on-chain!\", \"work\");\n\n  // prettier-ignore\n  const putPetToSleep = () => executeStellarAction(putPetToSleepStellar, \"Putting pet to sleep on Stellar...\", \"💤 Pet is sleeping on-chain!\", \"sleep\");\n\n  // Helper for wallet/pet validation\n  const validatePetAction = () => {\n    if (!isConnected) {\n      toast.error(\"Please connect your wallet first\");\n      return false;\n    }\n    if (!gameState.hasRealPet) {\n      toast.error(\"Please create a pet on Stellar first\");\n      return false;\n    }\n    return true;\n  };\n\n  const equipItem = (item: string) => {\n    if (!validatePetAction()) return;\n\n    setGameState((prev) => {\n      if (prev.equippedItems.includes(item)) {\n        toast(\"👔 Already equipped!\", { icon: \"ℹ️\" });\n        return prev;\n      }\n\n      toast.success(`✨ Equipped ${item}!`);\n      return {\n        ...prev,\n        equippedItems: [...prev.equippedItems, item],\n      };\n    });\n  };\n\n  const unequipItem = (item: string) => {\n    if (!validatePetAction()) return;\n\n    setGameState((prev) => ({\n      ...prev,\n      equippedItems: prev.equippedItems.filter((i) => i !== item),\n    }));\n    toast(\"👔 Item unequipped\");\n  };\n\n  const mintCoolGlasses = () =>\n    executeStellarAction(\n      mintGlasses,\n      \"🌟 Minting on Stellar...\",\n      \"🕶️ Cool Glasses minted on-chain!\",\n      \"mint\"\n    );\n\n  const resetGame = () => {\n    if (window.confirm(\"Reset your pet? All progress will be lost!\")) {\n      setGameState(INITIAL_STATE);\n      toast(\"🔄 Game reset!\");\n    }\n  };\n\n  // Reset game state when wallet disconnects\n  useEffect(() => {\n    if (!isConnected) {\n      setGameState(INITIAL_STATE);\n    } else {\n      syncWithBlockchain();\n    }\n  }, [isConnected]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        gameState,\n        feedPet,\n        playWithPet,\n        workWithPet,\n        putPetToSleep,\n        equipItem,\n        unequipItem,\n        mintCoolGlasses,\n        resetGame,\n        createRealPet,\n        syncWithBlockchain,\n        isLoading,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error(\"useGame must be used within GameProvider\");\n  }\n  return context;\n};\n",
      "type": "registry:file",
      "target": "~/app/context/game-context.tsx"
    },
    {
      "path": "registry/rei/tamagoreng/game-context.type.ts",
      "content": "export interface PetStats {\n  hunger: number; // 0-100\n  happy: number; // 0-100\n  energy: number; // 0-100\n}\n\nexport interface GameState {\n  stats: PetStats;\n  coins: number;\n  inventory: string[];\n  equippedItems: string[];\n  isSleeping: boolean;\n  lastUpdate: number;\n  petMood: \"happy\" | \"neutral\" | \"sad\" | \"sleeping\";\n  petName?: string;\n  hasRealPet: boolean; // Track if user has created a pet on-chain\n}\n\nexport interface GameContextType {\n  gameState: GameState;\n  feedPet: () => void;\n  playWithPet: () => void;\n  workWithPet: () => void;\n  putPetToSleep: () => void;\n  equipItem: (item: string) => void;\n  unequipItem: (item: string) => void;\n  mintCoolGlasses: () => void;\n  resetGame: () => void;\n  createRealPet: (name: string) => void;\n  syncWithBlockchain: () => void;\n  isLoading: boolean;\n}\n",
      "type": "registry:file",
      "target": "~/app/context/game-context.type.ts"
    }
  ]
}