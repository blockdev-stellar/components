{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-submit-transaction",
  "type": "registry:hook",
  "dependencies": [
    "@stellar/stellar-sdk"
  ],
  "files": [
    {
      "path": "registry/rei/use-submit-transaction.ts",
      "content": "import { useState } from \"react\";\nimport { TransactionBuilder, rpc } from \"@stellar/stellar-sdk\";\nimport { signTransaction } from \"~/config/wallet.client\";\nimport type { AssembledTransaction } from \"@stellar/stellar-sdk/contract\";\n\ninterface UseSubmitTransactionOptions {\n  rpcUrl: string;\n  networkPassphrase: string;\n  onSuccess?: () => void;\n  onError?: (error: unknown) => void;\n}\n\nexport function useSubmitTransaction(options: UseSubmitTransactionOptions) {\n  const [isSubmitting, setSubmitting] = useState(false);\n\n  async function submit(tx: AssembledTransaction<any>) {\n    setSubmitting(true);\n    try {\n      const builtTxXDR = tx.toXDR();\n      const signedXDR = await signTransaction(builtTxXDR);\n\n      // Submit transaction to the network\n      const server = new rpc.Server(options.rpcUrl);\n      const sentTx = await server.sendTransaction(\n        TransactionBuilder.fromXDR(signedXDR.signedTxXdr, options.networkPassphrase)\n      );\n\n      // Wait for transaction confirmation with polling\n      if (sentTx.status === \"PENDING\") {\n        const txHash = sentTx.hash;\n        let attempts = 0;\n        const maxAttempts = 30; // 30 attempts Ã— 2 seconds = 60 seconds total\n\n        while (attempts < maxAttempts) {\n          await new Promise((resolve) => setTimeout(resolve, 2000));\n          attempts++;\n\n          try {\n            const response = await fetch(`${options.rpcUrl}`, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: 1,\n                method: \"getTransaction\",\n                params: {\n                  hash: txHash,\n                },\n              }),\n            });\n\n            const data = await response.json();\n\n            if (data.error) {\n              if (data.error.code === -32602 || data.error.message?.includes(\"not found\")) {\n                continue;\n              } else {\n                throw new Error(`RPC Error: ${data.error.message}`);\n              }\n            }\n\n            if (data.result) {\n              const status = data.result.status;\n\n              if (status === \"SUCCESS\") {\n                options.onSuccess?.();\n                return { success: true };\n              } else if (status === \"FAILED\") {\n                throw new Error(`Transaction failed: ${JSON.stringify(data.result)}`);\n              }\n              // If status is still PENDING, continue polling\n            }\n          } catch (e: any) {\n            // If it's a network error or JSON parse error, continue polling\n            if (e.name === \"TypeError\" || e.message?.includes(\"fetch\")) {\n              continue;\n            }\n\n            throw e;\n          }\n        }\n\n        throw new Error(`Transaction timeout after ${maxAttempts * 2} seconds. Hash: ${txHash}`);\n      }\n\n      // If not pending, transaction was accepted\n      options.onSuccess?.();\n      return { success: true };\n    } catch (e) {\n      options.onError?.(e);\n      return { success: false, error: e };\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return { submit, isSubmitting };\n}\n",
      "type": "registry:hook"
    }
  ]
}